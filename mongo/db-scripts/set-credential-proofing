#!/opt/eduid/bin/python
#
# Convert users to the new User database format.
#
# Run as:
#
#   run_with_admintools /opt/eduid/db-scripts/fixes/convert-to-new-user
#

import sys

from eduid_userdb import User
from eduid_userdb.admin import RawDb


def main(dry_run, eppn, key, method, version):
    db = RawDb(myname='set-credential-proofing')

    count = 0

    for raw_user in db.find('eduid_am', 'attributes', {'eduPersonPrincipalName': eppn}):
        user = User.from_dict(raw_user.doc)
        print(user)

        cred = None
        # 'finger' shows truncated keys so look for a key that starts with 'key'
        for this in user.credentials.to_list():
            if this.key.startswith(key):
                cred = this
                break
        if not cred:
            print('User {} credential {} not found'.format(user, key))
            continue
        print(cred)
        cred.is_verified = True
        cred.proofing_method = method
        cred.proofing_version = version
        print(cred)

        raw_user.doc = user.to_dict()
        db.save_with_backup(raw_user, dry_run=dry_run)
        count += 1

    return bool(count > 0)


if __name__ == '__main__':
    args = sys.argv[1:]
    if not args:
        print('Syntax: set-credential-proofing [--force] eppn credential.key method version')
        print('  method is e.g. SWAMID_AL2_MFA_HI')
        sys.exit(1)
    dry_run = True
    if args[0] == '--force':
        dry_run = False
        args = args[1:]
    eppn, key, method, version = args
    print('Dry run: {}'.format(dry_run))
    if main(dry_run, eppn, key, method, version):
        sys.exit(0)

    sys.exit(1)
