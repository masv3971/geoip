#!/opt/eduid/bin/python
#
# Add a security key to a user for development
#
# Run as:
#
#   run_with_admintools /opt/eduid/db-scripts/add-security-key
#

import sys

from eduid.userdb import User
from eduid.userdb.admin import RawDb
from eduid.userdb.credentials import FidoCredential, U2F, Webauthn
from eduid.userdb.util import utc_now


def main(dry_run, eppn, cred_type):
    db = RawDb(myname='add-security-key')
    print('Running add-security-key')

    count = 0

    for raw_user in db.find('eduid_am', 'attributes', {'eduPersonPrincipalName': eppn}):
        user = User.from_dict(raw_user.doc)
        print(user)

        security_keys_count = len(user.credentials.filter(FidoCredential))
        if cred_type == 'webauthn':
            data = {
                'keyhandle': f'keyhandle_{security_keys_count + 1}',
                'credential_data': 'AAAAAAAAAAAAAAAAAAAAAABA_Pgd5uXWJjGhIXLqBbVMh88HL8NWJltysfIL7aGGflm9XAo2ijXe5hQIh5lH08J9hXTvaw9GB6Ri-NJ9fdKw-KUBAgMmIAEhWCDhan6Ud4k3o3h8ip6lVuEzBZQyCDlruFTchUTbDfjlniJYIMYLOPNlL8FkJX_rSBAugk-r1AWr3JlzojHQhxEqH0K6',
                'app_id': 'dev_app_id',
                'attest_obj': 'an_attest_obj',
                'description': f'Dev key {security_keys_count + 1}',
                'created_by': 'add-security-key',
                'created_ts': utc_now()
            }
            cred = Webauthn.from_dict(data)
        elif cred_type == 'u2f':
            data = {
                'version': 'Dev version',
                'keyhandle': f'keyhandle_{security_keys_count + 1}',
                'public_key': 'a_public_key',
                'app_id': 'dev_app_id',
                'attest_cert': 'an_attest_cert',
                'description': f'Dev key {security_keys_count + 1}',
                'created_by': 'add-security-key',
                'created_ts': utc_now()
            }
            cred = U2F.from_dict(data)
        else:
            raise RuntimeError(f'Invalid cred_type: {cred_type}')

        print(cred)
        user.credentials.add(cred)

        raw_user.doc = user.to_dict()
        db.save_with_backup(raw_user, dry_run=dry_run)
        count += 1

    return bool(count > 0)


if __name__ == '__main__':
    args = sys.argv[1:]
    if not args:
        print('Syntax: add-security-key [--force] eppn webauthn|u2f')
        sys.exit(1)
    dry_run = True
    if args[0] == '--force':
        dry_run = False
        args = args[1:]
    eppn, cred_type = args
    print('Dry run: {}'.format(dry_run))
    if main(dry_run, eppn, cred_type):
        sys.exit(0)
    print('No user with eppn {} found'.format(eppn))
    sys.exit(1)
